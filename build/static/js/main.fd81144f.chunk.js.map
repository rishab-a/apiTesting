{"version":3,"sources":["components/table/rowHead.jsx","components/Star-rating/index.jsx","components/table/row.jsx","components/tracker-box/index.jsx","pages/retrospective/Dashboard/index.jsx","pages/retrospective/New/index.jsx","App.js","serviceWorker.js","index.js"],"names":["TableRowHead","props","rowData","className","Object","keys","map","item","key","StarRating","activeWidth","rate","style","width","aria-hidden","TableRow","val","history","formatDetailedReports","createNew","onClick","event","stopPropagation","alert","showDetails","sprint","replace","createRetro","Date","toLocaleString","day","month","year","title","Tracker","head","content","type","RetrospectivePage","id","class","RetrospectiveNew","state","text","columnid","comments","this","setState","Pusher","cluster","encrypted","subscribe","bind","data","console","log","handleTextChange","e","keyCode","payload","target","axios","post","value","columns","Array","fill","c","i","placeholder","onChange","onKeyDown","chat","Component","App","createBrowserHistory","path","render","RetroContent","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.fd81144f.chunk.js","sourcesContent":["import React from 'react';\nimport './index.css';\n\nconst TableRowHead = (props) => {\n    const { rowData } = props;\n    return (\n        <div className={'table-row-head'}>\n            {Object.keys(rowData).map((item, key) => {\n                return (\n                    <div className={'row-head-item'} key={`row-head-${key}`}>{item}</div>\n                )\n            })\n            }\n        </div>\n    )\n}\nexport default TableRowHead;","import React from 'react';\nimport './index.css';\n\nconst StarRating = (props) => {\n    const activeWidth = (props.rate / 5) * 100;\n    return (\n        <span className=\"star-score\">\n            <div className=\"score-wrap\">\n                <span className=\"stars-active\" style={{ width: `${activeWidth}%` }}>\n                    <i className=\"fa fa-star\" aria-hidden=\"true\"></i>\n                    <i className=\"fa fa-star\" aria-hidden=\"true\"></i>\n                    <i className=\"fa fa-star\" aria-hidden=\"true\"></i>\n                    <i className=\"fa fa-star\" aria-hidden=\"true\"></i>\n                    <i className=\"fa fa-star\" aria-hidden=\"true\"></i>\n                </span>\n                <span className=\"stars-inactive\">\n                    <i className=\"fa fa-star-o\" aria-hidden=\"true\"></i>\n                    <i className=\"fa fa-star-o\" aria-hidden=\"true\"></i>\n                    <i className=\"fa fa-star-o\" aria-hidden=\"true\"></i>\n                    <i className=\"fa fa-star-o\" aria-hidden=\"true\"></i>\n                    <i className=\"fa fa-star-o\" aria-hidden=\"true\"></i>\n                </span>\n            </div>\n        </span>\n    )\n}\nexport default StarRating","import React from 'react';\nimport StarRating from '../Star-rating';\nimport './index.css';\n\nconst TableRow = (props) => {\n    const { rowData, history } = props;\n    const showDetails = (event, item) => {\n        if (event) {\n            event.stopPropagation();\n        }\n        alert(item);\n    }\n    const formatDate = (val) => {\n        let date = new Date(val);\n        return date.toLocaleString('default', { day: '2-digit', month: 'short', year: 'numeric' });\n    }\n    const createRetro = (event, sprint) => {\n        if (event) {\n            event.stopPropagation();\n        }\n        history.replace(`/Retrospective/New`);\n    }\n\n    const formatDetailedReports = (val, createNew) => {\n        if (val) {\n            return (<span className={'text-link'} onClick={(event) => { showDetails(event, val) }}>View</span>)\n        } else {\n            if (createNew) {\n                return (<span className={'text-link'} onClick={(event) => { createRetro(event, rowData[\"Sprint\"]) }}>Create New/Join</span>)\n            }\n            return (<span>NA</span>)\n        }\n    }\n\n    return (\n        <div className={'table-row'}>\n            <div className={'row-item'}>{rowData[\"Sprint\"]}</div>\n            <div className={'row-item'}>{rowData[\"Velocity\"]}</div>\n            <div className={'row-item'}>{rowData['Scope Changes']}</div>\n            <div className={'row-item'}>{formatDate(rowData[\"Completed Date\"])}</div>\n            <div className={'row-item'}>{formatDetailedReports(rowData[\"Sprint Report\"], false)}</div>\n            <div className={'row-item'}>{formatDetailedReports(rowData[\"Retro Inputs\"], true)}</div>\n            <div className={'row-item'} title={`${rowData[\"Happiness Index\"]} out of 5`}>{<StarRating rate={rowData[\"Happiness Index\"]} />}</div>\n        </div>\n    )\n}\nexport default TableRow;","import React from 'react';\nimport './index.css';\n\nconst Tracker = (props) => {\n\n    return (\n        <div className=\"tracker-container\">\n            <h3 className=\"tracker-head\">\n                {props.head}\n            </h3>\n            <div className=\"tracker-list\">\n                <div className=\"scroll-list\">{\n                    props.content.map((item, key) => {\n                        return (\n                            <div className=\"tracking-item\">\n                                <input type=\"checkbox\" />\n                                <span>{item}</span>\n                                </div>\n                        )\n                    })\n                }\n                </div>\n            </div>\n        </div>\n    )\n}\nexport default Tracker","import React from 'react';\nimport TableRowHead from '../../../components/table/rowHead';\nimport TableRow from '../../../components/table/row';\nimport Tracker from '../../../components/tracker-box'\nimport './index.css';\n\nconst RetrospectivePage = (props) => {\n    const { content } = props;\n    return (\n        <div id=\"container\">\n            <header>\n                <h1>EIGFOS Retrospectives</h1></header>\n            <section id=\"retro-list-container\">\n                <h3>Recently Created</h3>\n                <div className=\"retro-list\">\n                    <TableRowHead rowData={content[0]} />\n                    {content.map((item, key) => {\n                        return (\n                            <TableRow {...props} rowData={item} key={`table-row-${key}`} />\n                        )\n                    })\n                    }\n                </div>\n            </section>\n            <div id=\"track-progress\">\n                <section class=\"improvement-tracker\">\n                    <Tracker content={[\"improvement point #1\", \"improvement point #2\", \"improvement point #3\", \"improvement point #4\", \"improvement point #5\", \"improvement point #6\", \"improvement point #7\", \"improvement point #8\"]} head=\"Continuous Improvement Tracker\" />\n                </section>\n                <section class=\"accomplishment-tracker\">\n                    <Tracker content={[\"achieved point #1\", \"achieved point #2\", \"achieved point #3\", \"achieved point #4\", \"achieved point #5\", \"achieved point #6\", \"achieved point #7\", \"achieved point #8\"]} head=\"Achievement\" />\n                </section>\n            </div>\n        </div>\n    )\n}\nexport default RetrospectivePage;","\nimport React, { Component } from 'react';\nimport axios from 'axios';\nimport Pusher from 'pusher-js';\nimport './index.css'\n\n\n\nclass RetrospectiveNew extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      text: '',\n      columnid: '',\n      comments: []\n    };\n  }\n\n  componentDidMount() {\n\n    this.setState({ });\n    const pusher = new Pusher('d10973f4aeb6ded3f904', {\n      cluster: 'ap2',\n      encrypted: true\n    });\n    const channel = pusher.subscribe('retro-data');\n    channel.bind('content', data => {\n        console.log(data);\n      this.setState({ comments: [...this.state.comments, {...data}], [data.columnid]: '' });\n    });\n    this.handleTextChange = this.handleTextChange.bind(this);\n  }\n\n  handleTextChange(e) {\n    if (e.keyCode === 13) {\n      const payload = {\n        ...this.state,\n        columnid: e.target.id\n      };\n      axios.post('http://localhost:5000/Retrospective/New', payload);\n    } else {\n      this.setState({ [e.target.id]: e.target.value });\n    }\n  }\n\n  render() {\n  const columns  =Array(5).fill(null);\n    return (\n      <div className=\"row\">\n      { columns.map((c, i) => {\n        return (\n        <div className=\"column\">\n          <div className=\"chat\">\n            <input\n              type=\"text\"\n              id={i}\n              value={this.state[i]}\n              placeholder=\"type here...\"\n              className=\"form-control\"\n              onChange={this.handleTextChange}\n              onKeyDown={this.handleTextChange}\n            />\n          </div>\n          <div className=\"chatMessage\">\n            {this.state.comments.map(chat => {\n              return (chat[i] &&\n                <div key={chat.id} className=\"box\">\n                  <p>{chat[i]}</p>\n                </div>\n              )\n            })}\n          </div>\n        </div>\n        );\n      })};\n      </div>\n    );\n  }\n}\n\nexport default RetrospectiveNew;","import React from 'react';\nimport {createBrowserHistory} from 'history';\nimport {BrowserRouter, Route, } from 'react-router-dom';\n//import PlanningPoker from './pages/planning-poker';\nimport RetrospectiveDashboard from './pages/retrospective/Dashboard';\nimport RetrospectiveNew from './pages/retrospective/New';\nimport RetroContent from './content.json';\nimport './App.css';\n\nfunction App() {\n  const history = createBrowserHistory();\n  return (\n    <BrowserRouter history={history}>\n      {/* <Route path=\"/\" component={PlanningPoker} /> */}\n      {/* <Route path='/' render={(props) => (<Retrospective {...props} content={RetroContent} />)} /> */}\n      <Route path='/Retrospective/New' render={(props) => (<RetrospectiveNew {...props} content={RetroContent} />)} />\n      <Route path='/Retrospective/Dashboard' render={(props) => (<RetrospectiveDashboard {...props} content={RetroContent} />)} />\n    </BrowserRouter>\n  )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}